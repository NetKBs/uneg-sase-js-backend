generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  role     Role     @relation(fields: [roleId], references: [id])
  roleId   Int
  Student  Student?
  Teacher  Teacher?
}

model Student {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @unique
  personalData   PersonalData  @relation(fields: [personalDataId], references: [id])
  personalDataId Int
  academicData   AcademicData?
}

model Teacher {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @unique
  personalData   PersonalData @relation(fields: [personalDataId], references: [id])
  personalDataId Int
}

model PersonalData {
  id              Int           @id @default(autoincrement())
  name            String
  secondName      String
  lastName        String
  secondLastName  String
  gender          Gender        @relation(fields: [genderId], references: [id])
  genderId        Int
  birthDate       String
  ic              String        @unique
  maritalStatus   MaritalStatus @relation(fields: [maritalStatusId], references: [id])
  maritalStatusId Int
  email           String
  altEmail        String?
  phone           String
  altPhone        String?
  birthCity       String
  birthState      String
  birthCountry    String
  houseAddress    String
  workAddress     String?

  Student Student[]
  Teacher Teacher[]
}

model AcademicData {
  id        Int     @id @default(autoincrement())
  active    Boolean
  unegEmail String?
  campus    Campus  @relation(fields: [campuesId], references: [id])
  campuesId Int
  career    Career  @relation(fields: [careerId], references: [id])
  careerId  Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int     @unique
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model MaritalStatus {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  PersonalData PersonalData[]
}

model Gender {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  PersonalData PersonalData[]
}

model Campus {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  AcademicData AcademicData[]
}

model Career {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  AcademicData AcademicData[]
}
